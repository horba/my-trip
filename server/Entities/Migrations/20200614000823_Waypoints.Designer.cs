// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Entities.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20200614000823_Waypoints")]
    partial class Waypoints
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameRu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameUa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Albania",
                            NameRu = "Албания",
                            NameUa = "Албанія"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Canada",
                            NameRu = "Канада",
                            NameUa = "Канада"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Colombia",
                            NameRu = "Колумбия",
                            NameUa = "Колумбія"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cyprus",
                            NameRu = "Кипр",
                            NameUa = "Кіпр"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Dominica",
                            NameRu = "Доминикана",
                            NameUa = "Домінікана"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Egypt",
                            NameRu = "Египет",
                            NameUa = "Єгипет"
                        },
                        new
                        {
                            Id = 7,
                            Name = "France",
                            NameRu = "Франция",
                            NameUa = "Франція"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Ukraine",
                            NameRu = "Украина",
                            NameUa = "Україна"
                        });
                });

            modelBuilder.Entity("Entities.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "English"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Russian"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ukrainian"
                        });
                });

            modelBuilder.Entity("Entities.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Adults")
                        .HasColumnType("int");

                    b.Property<int>("Children")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Adults = 5,
                            Children = 0,
                            UserId = -1
                        },
                        new
                        {
                            Id = -2,
                            Adults = 4,
                            Children = 0,
                            UserId = -1
                        },
                        new
                        {
                            Id = -3,
                            Adults = 3,
                            Children = 0,
                            UserId = -1
                        },
                        new
                        {
                            Id = -4,
                            Adults = 2,
                            Children = 0,
                            UserId = -1
                        },
                        new
                        {
                            Id = -5,
                            Adults = 1,
                            Children = 0,
                            UserId = -1
                        });
                });

            modelBuilder.Entity("Entities.Models.TicketRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArrivalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ArrivalDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartureCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DepartureDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketRoutes");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            ArrivalCode = "KBP",
                            ArrivalDateTime = new DateTime(2022, 1, 3, 9, 0, 0, 0, DateTimeKind.Local),
                            DepartureCode = "KBK",
                            DepartureDateTime = new DateTime(2022, 1, 2, 9, 0, 0, 0, DateTimeKind.Local),
                            Price = 1000,
                            TicketId = -1
                        },
                        new
                        {
                            Id = -2,
                            ArrivalCode = "KBP",
                            ArrivalDateTime = new DateTime(2022, 1, 3, 9, 0, 0, 0, DateTimeKind.Local),
                            DepartureCode = "KBK",
                            DepartureDateTime = new DateTime(2022, 1, 2, 9, 0, 0, 0, DateTimeKind.Local),
                            Price = 900,
                            TicketId = -1
                        },
                        new
                        {
                            Id = -3,
                            ArrivalCode = "KBP",
                            ArrivalDateTime = new DateTime(2022, 1, 3, 9, 0, 0, 0, DateTimeKind.Local),
                            DepartureCode = "KBK",
                            DepartureDateTime = new DateTime(2022, 1, 2, 9, 0, 0, 0, DateTimeKind.Local),
                            Price = 800,
                            TicketId = -2
                        },
                        new
                        {
                            Id = -4,
                            ArrivalCode = "KBP",
                            ArrivalDateTime = new DateTime(2022, 1, 3, 9, 0, 0, 0, DateTimeKind.Local),
                            DepartureCode = "KBK",
                            DepartureDateTime = new DateTime(2022, 1, 2, 9, 0, 0, 0, DateTimeKind.Local),
                            Price = 700,
                            TicketId = -2
                        },
                        new
                        {
                            Id = -5,
                            ArrivalCode = "KBP",
                            ArrivalDateTime = new DateTime(2022, 1, 3, 9, 0, 0, 0, DateTimeKind.Local),
                            DepartureCode = "KBK",
                            DepartureDateTime = new DateTime(2022, 1, 2, 9, 0, 0, 0, DateTimeKind.Local),
                            Price = 600,
                            TicketId = -3
                        },
                        new
                        {
                            Id = -6,
                            ArrivalCode = "KBP",
                            ArrivalDateTime = new DateTime(2022, 1, 3, 9, 0, 0, 0, DateTimeKind.Local),
                            DepartureCode = "KBK",
                            DepartureDateTime = new DateTime(2022, 1, 2, 9, 0, 0, 0, DateTimeKind.Local),
                            Price = 500,
                            TicketId = -3
                        },
                        new
                        {
                            Id = -7,
                            ArrivalCode = "KBP",
                            ArrivalDateTime = new DateTime(2022, 1, 3, 9, 0, 0, 0, DateTimeKind.Local),
                            DepartureCode = "KBK",
                            DepartureDateTime = new DateTime(2022, 1, 2, 9, 0, 0, 0, DateTimeKind.Local),
                            Price = 400,
                            TicketId = -4
                        },
                        new
                        {
                            Id = -8,
                            ArrivalCode = "KBP",
                            ArrivalDateTime = new DateTime(2022, 1, 3, 9, 0, 0, 0, DateTimeKind.Local),
                            DepartureCode = "KBK",
                            DepartureDateTime = new DateTime(2022, 1, 2, 9, 0, 0, 0, DateTimeKind.Local),
                            Price = 300,
                            TicketId = -4
                        },
                        new
                        {
                            Id = -9,
                            ArrivalCode = "KBP",
                            ArrivalDateTime = new DateTime(2022, 1, 3, 9, 0, 0, 0, DateTimeKind.Local),
                            DepartureCode = "KBK",
                            DepartureDateTime = new DateTime(2022, 1, 2, 9, 0, 0, 0, DateTimeKind.Local),
                            Price = 200,
                            TicketId = -5
                        },
                        new
                        {
                            Id = -10,
                            ArrivalCode = "KBP",
                            ArrivalDateTime = new DateTime(2022, 1, 3, 9, 0, 0, 0, DateTimeKind.Local),
                            DepartureCode = "KBK",
                            DepartureDateTime = new DateTime(2022, 1, 2, 9, 0, 0, 0, DateTimeKind.Local),
                            Price = 100,
                            TicketId = -5
                        });
                });

            modelBuilder.Entity("Entities.Models.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArrivalCountryId")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartureCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartureCountryId")
                        .HasColumnType("int");

                    b.Property<string>("DifferenceInTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlightTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TransplantTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArrivalCountryId");

                    b.HasIndex("DepartureCountryId");

                    b.HasIndex("UserId");

                    b.ToTable("trips");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            ArrivalCountryId = 1,
                            Currency = "$",
                            DepartureCity = "Киев, Одесса с пересадкой в Дубае или Катаре",
                            DepartureCountryId = 8,
                            DifferenceInTime = "1 час",
                            EndDate = new DateTime(2020, 6, 21, 3, 8, 22, 769, DateTimeKind.Local).AddTicks(9616),
                            FlightTime = "0 часов",
                            ImageUrl = "https://www.eurotourism.az/site/assets/files/1817/5-7_1.jpg",
                            StartDate = new DateTime(2020, 6, 14, 3, 8, 22, 769, DateTimeKind.Local).AddTicks(9616),
                            TotalPrice = 100m,
                            TransplantTime = "+ время пересадки",
                            UserId = -1
                        },
                        new
                        {
                            Id = -2,
                            ArrivalCountryId = 2,
                            Currency = "$",
                            DepartureCity = "Киев, Одесса с пересадкой в Дубае или Катаре",
                            DepartureCountryId = 8,
                            DifferenceInTime = "2 час",
                            EndDate = new DateTime(2020, 5, 20, 3, 8, 22, 772, DateTimeKind.Local).AddTicks(1686),
                            FlightTime = "2 часов",
                            ImageUrl = "https://cdn.vuetifyjs.com/images/cards/plane.jpg",
                            StartDate = new DateTime(2020, 5, 13, 3, 8, 22, 772, DateTimeKind.Local).AddTicks(1686),
                            TotalPrice = 102m,
                            TransplantTime = "- прямой",
                            UserId = -1
                        },
                        new
                        {
                            Id = -3,
                            ArrivalCountryId = 3,
                            Currency = "$",
                            DepartureCity = "Киев, Одесса с пересадкой в Дубае или Катаре",
                            DepartureCountryId = 8,
                            DifferenceInTime = "3 час",
                            EndDate = new DateTime(2018, 4, 19, 3, 8, 22, 772, DateTimeKind.Local).AddTicks(1846),
                            FlightTime = "4 часов",
                            ImageUrl = "https://www.eurotourism.az/site/assets/files/1817/5-7_1.jpg",
                            StartDate = new DateTime(2018, 4, 12, 3, 8, 22, 772, DateTimeKind.Local).AddTicks(1846),
                            TotalPrice = 106m,
                            TransplantTime = "+ время пересадки",
                            UserId = -1
                        },
                        new
                        {
                            Id = -4,
                            ArrivalCountryId = 4,
                            Currency = "$",
                            DepartureCity = "Киев, Одесса с пересадкой в Дубае или Катаре",
                            DepartureCountryId = 8,
                            DifferenceInTime = "4 час",
                            EndDate = new DateTime(2018, 3, 18, 3, 8, 22, 772, DateTimeKind.Local).AddTicks(1900),
                            FlightTime = "6 часов",
                            ImageUrl = "https://cdn.vuetifyjs.com/images/cards/plane.jpg",
                            StartDate = new DateTime(2018, 3, 11, 3, 8, 22, 772, DateTimeKind.Local).AddTicks(1900),
                            TotalPrice = 112m,
                            TransplantTime = "- прямой",
                            UserId = -1
                        },
                        new
                        {
                            Id = -5,
                            ArrivalCountryId = 5,
                            Currency = "$",
                            DepartureCity = "Киев, Одесса с пересадкой в Дубае или Катаре",
                            DepartureCountryId = 8,
                            DifferenceInTime = "5 час",
                            EndDate = new DateTime(2016, 2, 17, 3, 8, 22, 772, DateTimeKind.Local).AddTicks(1908),
                            FlightTime = "8 часов",
                            ImageUrl = "https://www.eurotourism.az/site/assets/files/1817/5-7_1.jpg",
                            StartDate = new DateTime(2016, 2, 10, 3, 8, 22, 772, DateTimeKind.Local).AddTicks(1908),
                            TotalPrice = 120m,
                            TransplantTime = "+ время пересадки",
                            UserId = -1
                        },
                        new
                        {
                            Id = -6,
                            ArrivalCountryId = 6,
                            Currency = "$",
                            DepartureCity = "Киев, Одесса с пересадкой в Дубае или Катаре",
                            DepartureCountryId = 8,
                            DifferenceInTime = "6 час",
                            EndDate = new DateTime(2016, 1, 16, 3, 8, 22, 772, DateTimeKind.Local).AddTicks(1917),
                            FlightTime = "10 часов",
                            ImageUrl = "https://cdn.vuetifyjs.com/images/cards/plane.jpg",
                            StartDate = new DateTime(2016, 1, 9, 3, 8, 22, 772, DateTimeKind.Local).AddTicks(1917),
                            TotalPrice = 130m,
                            TransplantTime = "- прямой",
                            UserId = -1
                        },
                        new
                        {
                            Id = -7,
                            ArrivalCountryId = 7,
                            Currency = "$",
                            DepartureCity = "Киев, Одесса с пересадкой в Дубае или Катаре",
                            DepartureCountryId = 8,
                            DifferenceInTime = "7 час",
                            EndDate = new DateTime(2013, 12, 15, 3, 8, 22, 772, DateTimeKind.Local).AddTicks(1924),
                            FlightTime = "12 часов",
                            ImageUrl = "https://www.eurotourism.az/site/assets/files/1817/5-7_1.jpg",
                            StartDate = new DateTime(2013, 12, 8, 3, 8, 22, 772, DateTimeKind.Local).AddTicks(1924),
                            TotalPrice = 142m,
                            TransplantTime = "+ время пересадки",
                            UserId = -1
                        },
                        new
                        {
                            Id = -8,
                            ArrivalCountryId = 8,
                            Currency = "$",
                            DepartureCity = "Киев, Одесса с пересадкой в Дубае или Катаре",
                            DepartureCountryId = 8,
                            DifferenceInTime = "8 час",
                            EndDate = new DateTime(2013, 11, 14, 3, 8, 22, 772, DateTimeKind.Local).AddTicks(1931),
                            FlightTime = "14 часов",
                            ImageUrl = "https://cdn.vuetifyjs.com/images/cards/plane.jpg",
                            StartDate = new DateTime(2013, 11, 7, 3, 8, 22, 772, DateTimeKind.Local).AddTicks(1931),
                            TotalPrice = 156m,
                            TransplantTime = "- прямой",
                            UserId = -1
                        },
                        new
                        {
                            Id = 1,
                            ArrivalCountryId = 1,
                            Currency = "$",
                            DepartureCity = "Киев, Одесса с пересадкой в Дубае или Катаре",
                            DepartureCountryId = 8,
                            DifferenceInTime = "1 час",
                            EndDate = new DateTime(2020, 9, 29, 3, 8, 22, 772, DateTimeKind.Local).AddTicks(3535),
                            FlightTime = "0 часов",
                            ImageUrl = "https://www.eurotourism.az/site/assets/files/1817/5-7_1.jpg",
                            StartDate = new DateTime(2020, 9, 14, 3, 8, 22, 772, DateTimeKind.Local).AddTicks(3535),
                            TotalPrice = 100m,
                            TransplantTime = "+ время пересадки",
                            UserId = -1
                        },
                        new
                        {
                            Id = 2,
                            ArrivalCountryId = 2,
                            Currency = "$",
                            DepartureCity = "Киев, Одесса с пересадкой в Дубае или Катаре",
                            DepartureCountryId = 8,
                            DifferenceInTime = "2 час",
                            EndDate = new DateTime(2020, 10, 31, 3, 8, 22, 772, DateTimeKind.Local).AddTicks(4104),
                            FlightTime = "2 часов",
                            ImageUrl = "https://cdn.vuetifyjs.com/images/cards/plane.jpg",
                            StartDate = new DateTime(2020, 10, 16, 3, 8, 22, 772, DateTimeKind.Local).AddTicks(4104),
                            TotalPrice = 102m,
                            TransplantTime = "- прямой",
                            UserId = -1
                        },
                        new
                        {
                            Id = 3,
                            ArrivalCountryId = 3,
                            Currency = "$",
                            DepartureCity = "Киев, Одесса с пересадкой в Дубае или Катаре",
                            DepartureCountryId = 8,
                            DifferenceInTime = "3 час",
                            EndDate = new DateTime(2020, 12, 3, 3, 8, 22, 772, DateTimeKind.Local).AddTicks(4123),
                            FlightTime = "4 часов",
                            ImageUrl = "https://www.eurotourism.az/site/assets/files/1817/5-7_1.jpg",
                            StartDate = new DateTime(2020, 11, 18, 3, 8, 22, 772, DateTimeKind.Local).AddTicks(4123),
                            TotalPrice = 106m,
                            TransplantTime = "+ время пересадки",
                            UserId = -1
                        },
                        new
                        {
                            Id = 4,
                            ArrivalCountryId = 4,
                            Currency = "$",
                            DepartureCity = "Киев, Одесса с пересадкой в Дубае или Катаре",
                            DepartureCountryId = 8,
                            DifferenceInTime = "4 час",
                            EndDate = new DateTime(2022, 1, 4, 3, 8, 22, 772, DateTimeKind.Local).AddTicks(4133),
                            FlightTime = "6 часов",
                            ImageUrl = "https://cdn.vuetifyjs.com/images/cards/plane.jpg",
                            StartDate = new DateTime(2021, 12, 20, 3, 8, 22, 772, DateTimeKind.Local).AddTicks(4133),
                            TotalPrice = 112m,
                            TransplantTime = "- прямой",
                            UserId = -1
                        },
                        new
                        {
                            Id = 5,
                            ArrivalCountryId = 5,
                            Currency = "$",
                            DepartureCity = "Киев, Одесса с пересадкой в Дубае или Катаре",
                            DepartureCountryId = 8,
                            DifferenceInTime = "5 час",
                            EndDate = new DateTime(2022, 2, 6, 3, 8, 22, 772, DateTimeKind.Local).AddTicks(4143),
                            FlightTime = "8 часов",
                            ImageUrl = "https://www.eurotourism.az/site/assets/files/1817/5-7_1.jpg",
                            StartDate = new DateTime(2022, 1, 22, 3, 8, 22, 772, DateTimeKind.Local).AddTicks(4143),
                            TotalPrice = 120m,
                            TransplantTime = "+ время пересадки",
                            UserId = -1
                        },
                        new
                        {
                            Id = 6,
                            ArrivalCountryId = 6,
                            Currency = "$",
                            DepartureCity = "Киев, Одесса с пересадкой в Дубае или Катаре",
                            DepartureCountryId = 8,
                            DifferenceInTime = "6 час",
                            EndDate = new DateTime(2022, 3, 11, 3, 8, 22, 772, DateTimeKind.Local).AddTicks(4152),
                            FlightTime = "10 часов",
                            ImageUrl = "https://cdn.vuetifyjs.com/images/cards/plane.jpg",
                            StartDate = new DateTime(2022, 2, 24, 3, 8, 22, 772, DateTimeKind.Local).AddTicks(4152),
                            TotalPrice = 130m,
                            TransplantTime = "- прямой",
                            UserId = -1
                        },
                        new
                        {
                            Id = 7,
                            ArrivalCountryId = 7,
                            Currency = "$",
                            DepartureCity = "Киев, Одесса с пересадкой в Дубае или Катаре",
                            DepartureCountryId = 8,
                            DifferenceInTime = "7 час",
                            EndDate = new DateTime(2023, 4, 10, 3, 8, 22, 772, DateTimeKind.Local).AddTicks(4161),
                            FlightTime = "12 часов",
                            ImageUrl = "https://www.eurotourism.az/site/assets/files/1817/5-7_1.jpg",
                            StartDate = new DateTime(2023, 3, 26, 3, 8, 22, 772, DateTimeKind.Local).AddTicks(4161),
                            TotalPrice = 142m,
                            TransplantTime = "+ время пересадки",
                            UserId = -1
                        },
                        new
                        {
                            Id = 8,
                            ArrivalCountryId = 8,
                            Currency = "$",
                            DepartureCity = "Киев, Одесса с пересадкой в Дубае или Катаре",
                            DepartureCountryId = 8,
                            DifferenceInTime = "8 час",
                            EndDate = new DateTime(2023, 5, 13, 3, 8, 22, 772, DateTimeKind.Local).AddTicks(4171),
                            FlightTime = "14 часов",
                            ImageUrl = "https://cdn.vuetifyjs.com/images/cards/plane.jpg",
                            StartDate = new DateTime(2023, 4, 28, 3, 8, 22, 772, DateTimeKind.Local).AddTicks(4171),
                            TotalPrice = 156m,
                            TransplantTime = "- прямой",
                            UserId = -1
                        });
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AvatarFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("GoogleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("LanguageId");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Email = "test1@users.com",
                            FirstName = "Fn1",
                            Gender = 0,
                            LastName = "Ln1",
                            Password = "TUE84wwScLNrNAqIIntL6pM5aXdQH86I45ktdpySWW7Lks+IQ8ROMipz9/25/yyv"
                        },
                        new
                        {
                            Id = -2,
                            Email = "test2@users.com",
                            FirstName = "FirstName2",
                            Gender = 2,
                            LastName = "LastName2",
                            Password = "m0sgyKcAoe49tp3HLmy2vXrbm9TZ2JLhxA4Dw20DS7PjgOm/aajZVjnaApsciCHZ"
                        },
                        new
                        {
                            Id = -3,
                            Email = "test3@users.com",
                            FirstName = "FFFF3",
                            Gender = 3,
                            LastName = "LLLL3",
                            Password = "dX69i6yjU6uMhYd/N0PXxC36S+Xxv+5WKvwzmmWeON36y4G9P8NDFOtQcAFsCFDm"
                        },
                        new
                        {
                            Id = -4,
                            Email = "test4@users.com",
                            FirstName = "LongFirstName4",
                            Gender = 2,
                            LastName = "LongLastName4",
                            Password = "pejtNFgcnm2GS/0OlHfaRR5BZ6FivxfaNLz8B9T6p8fUnG1+BB5HvblQlfCEOQgw"
                        },
                        new
                        {
                            Id = -5,
                            Email = "test5@users.com",
                            Gender = 0,
                            LastName = "Last5",
                            Password = "/0KytQckJRBfiSNqLbIna40/qQ0Le60xRR7kOlXgH7XR3XSTdFeY/giJCX6aXbt4"
                        });
                });

            modelBuilder.Entity("Entities.Models.Waypoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Arrival")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Departure")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("PathLength")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("PathTime")
                        .HasColumnType("time");

                    b.Property<int>("Transport")
                        .HasColumnType("int");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.ToTable("Waypoints");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Arrival = new DateTime(2021, 1, 15, 1, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "0CitY0",
                            Departure = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Details = "Купить зарядку для телефона с нужной вилкой на 220 и 110",
                            IsCompleted = true,
                            Order = 0,
                            PathLength = 43,
                            PathTime = new TimeSpan(0, 2, 0, 0, 0),
                            Transport = 0,
                            TripId = 1
                        },
                        new
                        {
                            Id = 2,
                            Arrival = new DateTime(2021, 2, 16, 2, 5, 0, 0, DateTimeKind.Unspecified),
                            City = "1CitY1",
                            Departure = new DateTime(2021, 2, 2, 1, 3, 0, 0, DateTimeKind.Unspecified),
                            Details = "Купить зарядку для телефона с нужной вилкой на 220 и 110",
                            IsCompleted = false,
                            Order = 1,
                            PathLength = 121,
                            PathTime = new TimeSpan(0, 3, 14, 0, 0),
                            Transport = 1,
                            TripId = 1
                        },
                        new
                        {
                            Id = 3,
                            Arrival = new DateTime(2021, 3, 17, 3, 10, 0, 0, DateTimeKind.Unspecified),
                            City = "2CitY2",
                            Departure = new DateTime(2021, 3, 3, 2, 6, 0, 0, DateTimeKind.Unspecified),
                            Details = "Купить зарядку для телефона с нужной вилкой на 220 и 110",
                            IsCompleted = true,
                            Order = 2,
                            PathLength = 199,
                            PathTime = new TimeSpan(0, 4, 28, 0, 0),
                            Transport = 2,
                            TripId = 1
                        },
                        new
                        {
                            Id = 4,
                            Arrival = new DateTime(2021, 4, 18, 4, 15, 0, 0, DateTimeKind.Unspecified),
                            City = "3CitY3",
                            Departure = new DateTime(2021, 4, 4, 0, 9, 0, 0, DateTimeKind.Unspecified),
                            Details = "Купить зарядку для телефона с нужной вилкой на 220 и 110",
                            IsCompleted = false,
                            Order = 3,
                            PathLength = 277,
                            PathTime = new TimeSpan(0, 5, 42, 0, 0),
                            Transport = 3,
                            TripId = 1
                        },
                        new
                        {
                            Id = 5,
                            Arrival = new DateTime(2021, 5, 19, 1, 20, 0, 0, DateTimeKind.Unspecified),
                            City = "4CitY4",
                            Departure = new DateTime(2021, 5, 5, 1, 12, 0, 0, DateTimeKind.Unspecified),
                            Details = "Купить зарядку для телефона с нужной вилкой на 220 и 110",
                            IsCompleted = true,
                            Order = 4,
                            PathLength = 355,
                            PathTime = new TimeSpan(0, 6, 56, 0, 0),
                            Transport = 4,
                            TripId = 1
                        },
                        new
                        {
                            Id = 6,
                            Arrival = new DateTime(2021, 6, 20, 2, 25, 0, 0, DateTimeKind.Unspecified),
                            City = "5CitY5",
                            Departure = new DateTime(2021, 6, 6, 2, 15, 0, 0, DateTimeKind.Unspecified),
                            Details = "Купить зарядку для телефона с нужной вилкой на 220 и 110",
                            IsCompleted = false,
                            Order = 5,
                            PathLength = 433,
                            PathTime = new TimeSpan(0, 7, 10, 0, 0),
                            Transport = 0,
                            TripId = 1
                        },
                        new
                        {
                            Id = 7,
                            Arrival = new DateTime(2021, 7, 21, 3, 30, 0, 0, DateTimeKind.Unspecified),
                            City = "6CitY6",
                            Departure = new DateTime(2021, 7, 7, 0, 18, 0, 0, DateTimeKind.Unspecified),
                            Details = "Купить зарядку для телефона с нужной вилкой на 220 и 110",
                            IsCompleted = true,
                            Order = 6,
                            PathLength = 511,
                            PathTime = new TimeSpan(0, 8, 24, 0, 0),
                            Transport = 1,
                            TripId = 1
                        });
                });

            modelBuilder.Entity("Entities.Models.Ticket", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.TicketRoute", b =>
                {
                    b.HasOne("Entities.Models.Ticket", null)
                        .WithMany("Routes")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Trip", b =>
                {
                    b.HasOne("Entities.Models.Country", "ArrivalCountry")
                        .WithMany()
                        .HasForeignKey("ArrivalCountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Models.Country", "DepartureCountry")
                        .WithMany()
                        .HasForeignKey("DepartureCountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.HasOne("Entities.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Entities.Models.Waypoint", b =>
                {
                    b.HasOne("Entities.Models.Trip", "Trip")
                        .WithMany()
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
