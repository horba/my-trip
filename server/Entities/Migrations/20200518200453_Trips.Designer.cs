// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Entities.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20200518200453_Trips")]
    partial class Trips
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Albania"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Canada"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Colombia"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cyprus"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Dominica"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = 7,
                            Name = "France"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Ukraine"
                        });
                });

            modelBuilder.Entity("Entities.Models.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArrivalCountryId")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartureCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartureCountryId")
                        .HasColumnType("int");

                    b.Property<string>("DifferenceInTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlightTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArrivalCountryId");

                    b.HasIndex("DepartureCountryId");

                    b.HasIndex("UserId");

                    b.ToTable("trips");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            ArrivalCountryId = 1,
                            Currency = "$",
                            DepartureCity = "Киев, Одесса с пересадкой в Дубае или Катаре",
                            DepartureCountryId = 8,
                            DifferenceInTime = "1 час",
                            EndDate = new DateTime(2020, 5, 25, 23, 4, 52, 667, DateTimeKind.Local).AddTicks(8027),
                            FlightTime = "0 часов + время пересадки",
                            ImageUrl = "https://cdn.vuetifyjs.com/images/cards/plane.jpg",
                            StartDate = new DateTime(2020, 5, 18, 23, 4, 52, 664, DateTimeKind.Local).AddTicks(4771),
                            TotalPrice = 100m,
                            UserId = -1
                        },
                        new
                        {
                            Id = -2,
                            ArrivalCountryId = 2,
                            Currency = "$",
                            DepartureCity = "Киев, Одесса с пересадкой в Дубае или Катаре",
                            DepartureCountryId = 8,
                            DifferenceInTime = "2 час",
                            EndDate = new DateTime(2020, 5, 24, 23, 4, 52, 668, DateTimeKind.Local).AddTicks(9707),
                            FlightTime = "2 часов + время пересадки",
                            ImageUrl = "https://cdn.vuetifyjs.com/images/cards/plane.jpg",
                            StartDate = new DateTime(2020, 5, 17, 23, 4, 52, 668, DateTimeKind.Local).AddTicks(9675),
                            TotalPrice = 102m,
                            UserId = -1
                        },
                        new
                        {
                            Id = -3,
                            ArrivalCountryId = 3,
                            Currency = "$",
                            DepartureCity = "Киев, Одесса с пересадкой в Дубае или Катаре",
                            DepartureCountryId = 8,
                            DifferenceInTime = "3 час",
                            EndDate = new DateTime(2018, 5, 23, 23, 4, 52, 668, DateTimeKind.Local).AddTicks(9941),
                            FlightTime = "4 часов + время пересадки",
                            ImageUrl = "https://cdn.vuetifyjs.com/images/cards/plane.jpg",
                            StartDate = new DateTime(2018, 5, 16, 23, 4, 52, 668, DateTimeKind.Local).AddTicks(9928),
                            TotalPrice = 106m,
                            UserId = -1
                        },
                        new
                        {
                            Id = -4,
                            ArrivalCountryId = 4,
                            Currency = "$",
                            DepartureCity = "Киев, Одесса с пересадкой в Дубае или Катаре",
                            DepartureCountryId = 8,
                            DifferenceInTime = "4 час",
                            EndDate = new DateTime(2018, 5, 22, 23, 4, 52, 668, DateTimeKind.Local).AddTicks(9969),
                            FlightTime = "6 часов + время пересадки",
                            ImageUrl = "https://cdn.vuetifyjs.com/images/cards/plane.jpg",
                            StartDate = new DateTime(2018, 5, 15, 23, 4, 52, 668, DateTimeKind.Local).AddTicks(9962),
                            TotalPrice = 112m,
                            UserId = -1
                        },
                        new
                        {
                            Id = -5,
                            ArrivalCountryId = 5,
                            Currency = "$",
                            DepartureCity = "Киев, Одесса с пересадкой в Дубае или Катаре",
                            DepartureCountryId = 8,
                            DifferenceInTime = "5 час",
                            EndDate = new DateTime(2016, 5, 21, 23, 4, 52, 668, DateTimeKind.Local).AddTicks(9990),
                            FlightTime = "8 часов + время пересадки",
                            ImageUrl = "https://cdn.vuetifyjs.com/images/cards/plane.jpg",
                            StartDate = new DateTime(2016, 5, 14, 23, 4, 52, 668, DateTimeKind.Local).AddTicks(9983),
                            TotalPrice = 120m,
                            UserId = -1
                        },
                        new
                        {
                            Id = -6,
                            ArrivalCountryId = 6,
                            Currency = "$",
                            DepartureCity = "Киев, Одесса с пересадкой в Дубае или Катаре",
                            DepartureCountryId = 8,
                            DifferenceInTime = "6 час",
                            EndDate = new DateTime(2016, 5, 20, 23, 4, 52, 669, DateTimeKind.Local).AddTicks(88),
                            FlightTime = "10 часов + время пересадки",
                            ImageUrl = "https://cdn.vuetifyjs.com/images/cards/plane.jpg",
                            StartDate = new DateTime(2016, 5, 13, 23, 4, 52, 669, DateTimeKind.Local).AddTicks(79),
                            TotalPrice = 130m,
                            UserId = -1
                        },
                        new
                        {
                            Id = -7,
                            ArrivalCountryId = 7,
                            Currency = "$",
                            DepartureCity = "Киев, Одесса с пересадкой в Дубае или Катаре",
                            DepartureCountryId = 8,
                            DifferenceInTime = "7 час",
                            EndDate = new DateTime(2014, 5, 19, 23, 4, 52, 669, DateTimeKind.Local).AddTicks(109),
                            FlightTime = "12 часов + время пересадки",
                            ImageUrl = "https://cdn.vuetifyjs.com/images/cards/plane.jpg",
                            StartDate = new DateTime(2014, 5, 12, 23, 4, 52, 669, DateTimeKind.Local).AddTicks(102),
                            TotalPrice = 142m,
                            UserId = -1
                        },
                        new
                        {
                            Id = -8,
                            ArrivalCountryId = 8,
                            Currency = "$",
                            DepartureCity = "Киев, Одесса с пересадкой в Дубае или Катаре",
                            DepartureCountryId = 8,
                            DifferenceInTime = "8 час",
                            EndDate = new DateTime(2014, 5, 18, 23, 4, 52, 669, DateTimeKind.Local).AddTicks(129),
                            FlightTime = "14 часов + время пересадки",
                            ImageUrl = "https://cdn.vuetifyjs.com/images/cards/plane.jpg",
                            StartDate = new DateTime(2014, 5, 11, 23, 4, 52, 669, DateTimeKind.Local).AddTicks(123),
                            TotalPrice = 156m,
                            UserId = -1
                        });
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Email = "test1@users.com",
                            Password = "IfBQ+WOkep6GOTjmLz+xjYXEbbl7+hJVOw+ZAr1a4xmL4HtuvV9yXIsFi4SrzVIN"
                        },
                        new
                        {
                            Id = -2,
                            Email = "test2@users.com",
                            Password = "kWZVgA0hmrU0yCe5WKNWrzatDNnE3RfvjcBw3td2bhDC0is4gxzeuQfoDez3Uajh"
                        },
                        new
                        {
                            Id = -3,
                            Email = "test3@users.com",
                            Password = "V1QjU6XjQ4kKODFMqRqPSQHctTDuWLAT4nsp44L14EBIrncLQzO8hawcozIQYBFR"
                        },
                        new
                        {
                            Id = -4,
                            Email = "test4@users.com",
                            Password = "5mgrcrdwS78STNTyyd4FotrXDJMuwZQKBIu+omYCG+m1v6zrJ76jc7o/LnMwbEHZ"
                        },
                        new
                        {
                            Id = -5,
                            Email = "test5@users.com",
                            Password = "3ZrRqHvOc+mZkjK35J4YB6KRLnrqOJuJ5a5mL8cEieG22ZJ5ngAdsPiPVMubCJ9y"
                        });
                });

            modelBuilder.Entity("Entities.Models.Trip", b =>
                {
                    b.HasOne("Entities.Models.Country", "ArrivalCountry")
                        .WithMany()
                        .HasForeignKey("ArrivalCountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Models.Country", "DepartureCountry")
                        .WithMany()
                        .HasForeignKey("DepartureCountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
