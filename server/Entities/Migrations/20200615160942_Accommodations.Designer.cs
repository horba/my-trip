// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Entities.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20200615160942_Accommodations")]
    partial class Accommodations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Models.Accommodation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ArrivalDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("GooglePlaceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GuestCount")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("LocationLat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("LocationLng")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PriceLevel")
                        .HasColumnType("int");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("RatingTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RoomsCount")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("accommodations");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Address = "Dmytra Yavornytskoho Avenue, 67К, Dnipro",
                            ArrivalDateTime = new DateTime(2020, 6, 20, 19, 9, 41, 779, DateTimeKind.Local).AddTicks(2658),
                            DepartureDateTime = new DateTime(2020, 6, 22, 19, 9, 41, 779, DateTimeKind.Local).AddTicks(3496),
                            GuestCount = 1,
                            Link = "http://www.grand-hotel-ukraine.dp.ua",
                            Name = "Grand Hotel Ukraine",
                            Note = "056 790 1441",
                            RoomsCount = 1,
                            UserId = -1
                        },
                        new
                        {
                            Id = -2,
                            Address = "Sholom-Aleikhema Street, 4/26, Dnipro",
                            ArrivalDateTime = new DateTime(2020, 6, 27, 19, 9, 41, 779, DateTimeKind.Local).AddTicks(8635),
                            DepartureDateTime = new DateTime(2020, 7, 2, 19, 9, 41, 779, DateTimeKind.Local).AddTicks(8673),
                            GuestCount = 2,
                            Link = "http://menorah-center.com",
                            Name = "Menorah",
                            Note = "056 717 7000",
                            RoomsCount = 2,
                            UserId = -1
                        });
                });

            modelBuilder.Entity("Entities.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameRu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameUa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Albania",
                            NameRu = "Албания",
                            NameUa = "Албанія"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Canada",
                            NameRu = "Канада",
                            NameUa = "Канада"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Colombia",
                            NameRu = "Колумбия",
                            NameUa = "Колумбія"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cyprus",
                            NameRu = "Кипр",
                            NameUa = "Кіпр"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Dominica",
                            NameRu = "Доминикана",
                            NameUa = "Домінікана"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Egypt",
                            NameRu = "Египет",
                            NameUa = "Єгипет"
                        },
                        new
                        {
                            Id = 7,
                            Name = "France",
                            NameRu = "Франция",
                            NameUa = "Франція"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Ukraine",
                            NameRu = "Украина",
                            NameUa = "Україна"
                        });
                });

            modelBuilder.Entity("Entities.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "English"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Russian"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ukrainian"
                        });
                });

            modelBuilder.Entity("Entities.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Adults")
                        .HasColumnType("int");

                    b.Property<int>("Children")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Adults = 5,
                            Children = 0,
                            UserId = -1
                        },
                        new
                        {
                            Id = -2,
                            Adults = 4,
                            Children = 0,
                            UserId = -1
                        },
                        new
                        {
                            Id = -3,
                            Adults = 3,
                            Children = 0,
                            UserId = -1
                        },
                        new
                        {
                            Id = -4,
                            Adults = 2,
                            Children = 0,
                            UserId = -1
                        },
                        new
                        {
                            Id = -5,
                            Adults = 1,
                            Children = 0,
                            UserId = -1
                        });
                });

            modelBuilder.Entity("Entities.Models.TicketRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArrivalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ArrivalDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartureCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DepartureDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketRoutes");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            ArrivalCode = "KBP",
                            ArrivalDateTime = new DateTime(2022, 1, 3, 9, 0, 0, 0, DateTimeKind.Local),
                            DepartureCode = "KBK",
                            DepartureDateTime = new DateTime(2022, 1, 2, 9, 0, 0, 0, DateTimeKind.Local),
                            Price = 1000,
                            TicketId = -1
                        },
                        new
                        {
                            Id = -2,
                            ArrivalCode = "KBP",
                            ArrivalDateTime = new DateTime(2022, 1, 3, 9, 0, 0, 0, DateTimeKind.Local),
                            DepartureCode = "KBK",
                            DepartureDateTime = new DateTime(2022, 1, 2, 9, 0, 0, 0, DateTimeKind.Local),
                            Price = 900,
                            TicketId = -1
                        },
                        new
                        {
                            Id = -3,
                            ArrivalCode = "KBP",
                            ArrivalDateTime = new DateTime(2022, 1, 3, 9, 0, 0, 0, DateTimeKind.Local),
                            DepartureCode = "KBK",
                            DepartureDateTime = new DateTime(2022, 1, 2, 9, 0, 0, 0, DateTimeKind.Local),
                            Price = 800,
                            TicketId = -2
                        },
                        new
                        {
                            Id = -4,
                            ArrivalCode = "KBP",
                            ArrivalDateTime = new DateTime(2022, 1, 3, 9, 0, 0, 0, DateTimeKind.Local),
                            DepartureCode = "KBK",
                            DepartureDateTime = new DateTime(2022, 1, 2, 9, 0, 0, 0, DateTimeKind.Local),
                            Price = 700,
                            TicketId = -2
                        },
                        new
                        {
                            Id = -5,
                            ArrivalCode = "KBP",
                            ArrivalDateTime = new DateTime(2022, 1, 3, 9, 0, 0, 0, DateTimeKind.Local),
                            DepartureCode = "KBK",
                            DepartureDateTime = new DateTime(2022, 1, 2, 9, 0, 0, 0, DateTimeKind.Local),
                            Price = 600,
                            TicketId = -3
                        },
                        new
                        {
                            Id = -6,
                            ArrivalCode = "KBP",
                            ArrivalDateTime = new DateTime(2022, 1, 3, 9, 0, 0, 0, DateTimeKind.Local),
                            DepartureCode = "KBK",
                            DepartureDateTime = new DateTime(2022, 1, 2, 9, 0, 0, 0, DateTimeKind.Local),
                            Price = 500,
                            TicketId = -3
                        },
                        new
                        {
                            Id = -7,
                            ArrivalCode = "KBP",
                            ArrivalDateTime = new DateTime(2022, 1, 3, 9, 0, 0, 0, DateTimeKind.Local),
                            DepartureCode = "KBK",
                            DepartureDateTime = new DateTime(2022, 1, 2, 9, 0, 0, 0, DateTimeKind.Local),
                            Price = 400,
                            TicketId = -4
                        },
                        new
                        {
                            Id = -8,
                            ArrivalCode = "KBP",
                            ArrivalDateTime = new DateTime(2022, 1, 3, 9, 0, 0, 0, DateTimeKind.Local),
                            DepartureCode = "KBK",
                            DepartureDateTime = new DateTime(2022, 1, 2, 9, 0, 0, 0, DateTimeKind.Local),
                            Price = 300,
                            TicketId = -4
                        },
                        new
                        {
                            Id = -9,
                            ArrivalCode = "KBP",
                            ArrivalDateTime = new DateTime(2022, 1, 3, 9, 0, 0, 0, DateTimeKind.Local),
                            DepartureCode = "KBK",
                            DepartureDateTime = new DateTime(2022, 1, 2, 9, 0, 0, 0, DateTimeKind.Local),
                            Price = 200,
                            TicketId = -5
                        },
                        new
                        {
                            Id = -10,
                            ArrivalCode = "KBP",
                            ArrivalDateTime = new DateTime(2022, 1, 3, 9, 0, 0, 0, DateTimeKind.Local),
                            DepartureCode = "KBK",
                            DepartureDateTime = new DateTime(2022, 1, 2, 9, 0, 0, 0, DateTimeKind.Local),
                            Price = 100,
                            TicketId = -5
                        });
                });

            modelBuilder.Entity("Entities.Models.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArrivalCountryId")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartureCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartureCountryId")
                        .HasColumnType("int");

                    b.Property<string>("DifferenceInTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlightTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TransplantTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArrivalCountryId");

                    b.HasIndex("DepartureCountryId");

                    b.HasIndex("UserId");

                    b.ToTable("trips");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            ArrivalCountryId = 1,
                            Currency = "$",
                            DepartureCity = "Киев, Одесса с пересадкой в Дубае или Катаре",
                            DepartureCountryId = 8,
                            DifferenceInTime = "1 час",
                            EndDate = new DateTime(2020, 6, 22, 19, 9, 41, 756, DateTimeKind.Local).AddTicks(4078),
                            FlightTime = "0 часов",
                            ImageUrl = "https://www.eurotourism.az/site/assets/files/1817/5-7_1.jpg",
                            StartDate = new DateTime(2020, 6, 15, 19, 9, 41, 756, DateTimeKind.Local).AddTicks(4078),
                            TotalPrice = 100m,
                            TransplantTime = "+ время пересадки",
                            UserId = -1
                        },
                        new
                        {
                            Id = -2,
                            ArrivalCountryId = 2,
                            Currency = "$",
                            DepartureCity = "Киев, Одесса с пересадкой в Дубае или Катаре",
                            DepartureCountryId = 8,
                            DifferenceInTime = "2 час",
                            EndDate = new DateTime(2020, 5, 21, 19, 9, 41, 761, DateTimeKind.Local).AddTicks(1936),
                            FlightTime = "2 часов",
                            ImageUrl = "https://cdn.vuetifyjs.com/images/cards/plane.jpg",
                            StartDate = new DateTime(2020, 5, 14, 19, 9, 41, 761, DateTimeKind.Local).AddTicks(1936),
                            TotalPrice = 102m,
                            TransplantTime = "- прямой",
                            UserId = -1
                        },
                        new
                        {
                            Id = -3,
                            ArrivalCountryId = 3,
                            Currency = "$",
                            DepartureCity = "Киев, Одесса с пересадкой в Дубае или Катаре",
                            DepartureCountryId = 8,
                            DifferenceInTime = "3 час",
                            EndDate = new DateTime(2018, 4, 20, 19, 9, 41, 761, DateTimeKind.Local).AddTicks(2227),
                            FlightTime = "4 часов",
                            ImageUrl = "https://www.eurotourism.az/site/assets/files/1817/5-7_1.jpg",
                            StartDate = new DateTime(2018, 4, 13, 19, 9, 41, 761, DateTimeKind.Local).AddTicks(2227),
                            TotalPrice = 106m,
                            TransplantTime = "+ время пересадки",
                            UserId = -1
                        },
                        new
                        {
                            Id = -4,
                            ArrivalCountryId = 4,
                            Currency = "$",
                            DepartureCity = "Киев, Одесса с пересадкой в Дубае или Катаре",
                            DepartureCountryId = 8,
                            DifferenceInTime = "4 час",
                            EndDate = new DateTime(2018, 3, 19, 19, 9, 41, 761, DateTimeKind.Local).AddTicks(2258),
                            FlightTime = "6 часов",
                            ImageUrl = "https://cdn.vuetifyjs.com/images/cards/plane.jpg",
                            StartDate = new DateTime(2018, 3, 12, 19, 9, 41, 761, DateTimeKind.Local).AddTicks(2258),
                            TotalPrice = 112m,
                            TransplantTime = "- прямой",
                            UserId = -1
                        },
                        new
                        {
                            Id = -5,
                            ArrivalCountryId = 5,
                            Currency = "$",
                            DepartureCity = "Киев, Одесса с пересадкой в Дубае или Катаре",
                            DepartureCountryId = 8,
                            DifferenceInTime = "5 час",
                            EndDate = new DateTime(2016, 2, 18, 19, 9, 41, 761, DateTimeKind.Local).AddTicks(2274),
                            FlightTime = "8 часов",
                            ImageUrl = "https://www.eurotourism.az/site/assets/files/1817/5-7_1.jpg",
                            StartDate = new DateTime(2016, 2, 11, 19, 9, 41, 761, DateTimeKind.Local).AddTicks(2274),
                            TotalPrice = 120m,
                            TransplantTime = "+ время пересадки",
                            UserId = -1
                        },
                        new
                        {
                            Id = -6,
                            ArrivalCountryId = 6,
                            Currency = "$",
                            DepartureCity = "Киев, Одесса с пересадкой в Дубае или Катаре",
                            DepartureCountryId = 8,
                            DifferenceInTime = "6 час",
                            EndDate = new DateTime(2016, 1, 17, 19, 9, 41, 761, DateTimeKind.Local).AddTicks(2294),
                            FlightTime = "10 часов",
                            ImageUrl = "https://cdn.vuetifyjs.com/images/cards/plane.jpg",
                            StartDate = new DateTime(2016, 1, 10, 19, 9, 41, 761, DateTimeKind.Local).AddTicks(2294),
                            TotalPrice = 130m,
                            TransplantTime = "- прямой",
                            UserId = -1
                        },
                        new
                        {
                            Id = -7,
                            ArrivalCountryId = 7,
                            Currency = "$",
                            DepartureCity = "Киев, Одесса с пересадкой в Дубае или Катаре",
                            DepartureCountryId = 8,
                            DifferenceInTime = "7 час",
                            EndDate = new DateTime(2013, 12, 16, 19, 9, 41, 761, DateTimeKind.Local).AddTicks(2309),
                            FlightTime = "12 часов",
                            ImageUrl = "https://www.eurotourism.az/site/assets/files/1817/5-7_1.jpg",
                            StartDate = new DateTime(2013, 12, 9, 19, 9, 41, 761, DateTimeKind.Local).AddTicks(2309),
                            TotalPrice = 142m,
                            TransplantTime = "+ время пересадки",
                            UserId = -1
                        },
                        new
                        {
                            Id = -8,
                            ArrivalCountryId = 8,
                            Currency = "$",
                            DepartureCity = "Киев, Одесса с пересадкой в Дубае или Катаре",
                            DepartureCountryId = 8,
                            DifferenceInTime = "8 час",
                            EndDate = new DateTime(2013, 11, 15, 19, 9, 41, 761, DateTimeKind.Local).AddTicks(2322),
                            FlightTime = "14 часов",
                            ImageUrl = "https://cdn.vuetifyjs.com/images/cards/plane.jpg",
                            StartDate = new DateTime(2013, 11, 8, 19, 9, 41, 761, DateTimeKind.Local).AddTicks(2322),
                            TotalPrice = 156m,
                            TransplantTime = "- прямой",
                            UserId = -1
                        });
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AvatarFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("GoogleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("LanguageId");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Email = "test1@users.com",
                            FirstName = "Fn1",
                            Gender = 0,
                            LastName = "Ln1",
                            Password = "GCc8EqSTrGRi0m4xzisaRuJW5LGU30L5SnviXJzW6eVxG5aVnmGShPj2vRwGAUVX"
                        },
                        new
                        {
                            Id = -2,
                            Email = "test2@users.com",
                            FirstName = "FirstName2",
                            Gender = 2,
                            LastName = "LastName2",
                            Password = "HZKwKRu4zDy9HVkhjtKzcPbE7KQ9H0mtcLGBIfA9mdKZHkH3meL1rzkRC+2IOhzj"
                        },
                        new
                        {
                            Id = -3,
                            Email = "test3@users.com",
                            FirstName = "FFFF3",
                            Gender = 3,
                            LastName = "LLLL3",
                            Password = "vUE5W3xsNixsMFUFiNHBU4eRx1Gs/W9EmAGCwEHX9BgxUTFsf1j16m566rUn1D72"
                        },
                        new
                        {
                            Id = -4,
                            Email = "test4@users.com",
                            FirstName = "LongFirstName4",
                            Gender = 2,
                            LastName = "LongLastName4",
                            Password = "+KJx/EMtPDY+klpZUuGvW7MpgFbsd0J9rPBq2cCM/mYJ3SNYzoyMHTOuuX2hyoK5"
                        },
                        new
                        {
                            Id = -5,
                            Email = "test5@users.com",
                            Gender = 0,
                            LastName = "Last5",
                            Password = "5s8yoYG+M5Zt6H6UpFvV8nRJqzd3hL9irOsrD4V6hGWEiX5VvRobMa3tM9IOTWc4"
                        });
                });

            modelBuilder.Entity("Entities.Models.Ticket", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.TicketRoute", b =>
                {
                    b.HasOne("Entities.Models.Ticket", null)
                        .WithMany("Routes")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Trip", b =>
                {
                    b.HasOne("Entities.Models.Country", "ArrivalCountry")
                        .WithMany()
                        .HasForeignKey("ArrivalCountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Models.Country", "DepartureCountry")
                        .WithMany()
                        .HasForeignKey("DepartureCountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.HasOne("Entities.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
